CREATE OR REPLACE FUNCTION update_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;



CREATE TABLE file(
	id SERIAL PRIMARY KEY,
	name VARCHAR(50) UNIQUE NOT NULL,
	mime_type VARCHAR(50) NOT NULL,
	key VARCHAR(50) UNIQUE NOT NULL,
	url VARCHAR(250) UNIQUE NOT NULL,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE TRIGGER update_file_updated_at
BEFORE UPDATE ON file
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();



CREATE TABLE country(
	id SERIAL PRIMARY KEY,
	name VARCHAR(50) UNIQUE NOT NULL,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE TRIGGER update_country_updated_at
BEFORE UPDATE ON country
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();



CREATE TABLE user_account(
	id SERIAL PRIMARY KEY,
	username VARCHAR(50) UNIQUE NOT NULL,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	email VARCHAR(100) UNIQUE NOT NULL,
	password VARCHAR(100) NOT NULL,
	avatar_id INTEGER REFERENCES file(id) ON DELETE SET NULL UNIQUE,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE TRIGGER update_user_account_updated_at
BEFORE UPDATE ON user_account
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();



CREATE TABLE person(
	id SERIAL PRIMARY KEY,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	biography TEXT,
	date_of_birth DATE,
	gender ENUM('male', 'female', 'non-binary'),
	country_id INTEGER REFERENCES country(id) ON DELETE SET NULL,
	photo_id INTEGER REFERENCES file(id) ON DELETE SET NULL UNIQUE,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE TRIGGER update_person_updated_at
BEFORE UPDATE ON person
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();



CREATE TABLE movie(
	id SERIAL PRIMARY KEY,
	title VARCHAR(50) UNIQUE NOT NULL,
	description TEXT,
	budget NUMERIC,
	release_date DATE,
	duration INTERVAL,
	poster_id INTEGER REFERENCES file(id) ON DELETE SET NULL UNIQUE,
	country_id INTEGER REFERENCES country(id) ON DELETE SET NULL,
	director_id INTEGER REFERENCES person(id) ON DELETE SET NULL,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE TRIGGER update_movie_updated_at
BEFORE UPDATE ON movie
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();



CREATE TABLE character(
	id SERIAL PRIMARY KEY,
	name VARCHAR(20) UNIQUE NOT NULL,
	description TEXT,
	role ENUM('leading', 'supporting', 'background'),
	movie_id INTEGER REFERENCES movie(id) ON DELETE CASCADE NOT NULL,
	actor_id INTEGER REFERENCES person(id) ON DELETE SET NULL,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE TRIGGER update_character_updated_at
BEFORE UPDATE ON character
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();



CREATE TABLE genre(
	id SERIAL PRIMARY KEY,
	name VARCHAR(20) UNIQUE NOT NULL,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE TRIGGER update_genre_updated_at
BEFORE UPDATE ON genre
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();



CREATE TABLE person_photos(
	PRIMARY KEY(person_id, file_id),
	person_id INTEGER REFERENCES person(id) ON DELETE CASCADE NOT NULL,
	file_id INTEGER REFERENCES file(id) ON DELETE CASCADE UNIQUE NOT NULL,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE TRIGGER update_person_photos_updated_at
BEFORE UPDATE ON person_photos
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();



CREATE TABLE user_favorite_movies(
	PRIMARY KEY(user_id, movie_id),
	user_id INTEGER REFERENCES user_account(id) ON DELETE CASCADE NOT NULL,
	movie_id INTEGER REFERENCES movie(id) ON DELETE CASCADE NOT NULL ,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE TRIGGER update_user_favorite_movies_updated_at
BEFORE UPDATE ON user_favorite_movies
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();



CREATE TABLE movie_genres(
	PRIMARY KEY(movie_id, genre_id),
	movie_id INTEGER REFERENCES movie(id) ON DELETE CASCADE NOT NULL ,
	genre_id INTEGER REFERENCES genre(id) ON DELETE CASCADE NOT NULL,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE TRIGGER update_movie_genre_updated_at
BEFORE UPDATE ON movie_genre
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();



CREATE TABLE movie_actors(
	PRIMARY KEY(actor_id, movie_id),
	actor_id INTEGER REFERENCES person(id) ON DELETE CASCADE NOT NULL,
	movie_id INTEGER REFERENCES movie(id) ON DELETE CASCADE NOT NULL,
	created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
	updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE TRIGGER update_actors_movies_updated_at
BEFORE UPDATE ON actors_movies
FOR EACH ROW
EXECUTE FUNCTION update_timestamp();